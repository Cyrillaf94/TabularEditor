<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>186, 17</value>
  </metadata>
  <data name="chkChangeDetectionLocalServer.ToolTip" xml:space="preserve">
    <value>Checking this, will automatically update the Tabular Object Model loaded in Tabular Editor, when changes are made to the connected model from another application. Note that this feature currently only supports local instances of Analysis Services, such as the one running behind Power BI Desktop.</value>
  </data>
  <data name="chkAutoBackup.ToolTip" xml:space="preserve">
    <value>If this checkbox is enabled, Tabular Editor will backup the model metadata prior to
every save or deployment to an existing (workspace) database.

This allows you to rollback unintended metadata changes, even after Tabular Editor
was closed. The metadata is backed up as a compressed (zipped) Model.bim file,
using the current date and time as the filename.</value>
  </data>
  <data name="cmbSeparators.ToolTip" xml:space="preserve">
    <value>Choose how the DAX Expression Editor should display list and decimal separators. NOTE: This will not affect the content of DAX expressions in the model metadata, which are always stored in the US/UK format.</value>
  </data>
  <data name="chkAnnotateDeploymentMetadata.ToolTip" xml:space="preserve">
    <value>If you enable this option, Tabular Editor will add an annotations to the model that provides the following information:
- Date and time of deployment
- Domain and username of the person that performed the deployment
- Client machine
- Build # of Tabular Editor</value>
  </data>
  <data name="chkIgnorePrivacySettings.ToolTip" xml:space="preserve">
    <value>Older versions of Microsoft.AnalysisServices.Deployment do not support the PrivacySetting property. If you plan to deploy your .asdatabase script with Microsoft.AnalysisServices.Deployment, check this to remove the PrivacySetting property when a model is saved to disk.</value>
  </data>
  <data name="chkIgnorePrivacySettingsCM.ToolTip" xml:space="preserve">
    <value>Older versions of Microsoft.AnalysisServices.Deployment do not support the PrivacySetting property. If you plan to deploy your .asdatabase script with Microsoft.AnalysisServices.Deployment, check this to remove the PrivacySetting property when a model is saved to disk.</value>
  </data>
  <data name="chkIncludeRefs.ToolTip" xml:space="preserve">
    <value>If checked, the model.tmdl file will include details on how objects should be ordered in the deserialized metadata. The metadata order carries no semantic meaning, but some developers may prefer an explicit ordering.</value>
  </data>
  <data name="chkIncludeRefsCM.ToolTip" xml:space="preserve">
    <value>If checked, the model.tmdl file will include details on how objects should be ordered in the deserialized metadata. The metadata order carries no semantic meaning, but some developers may prefer an explicit ordering.</value>
  </data>
</root>